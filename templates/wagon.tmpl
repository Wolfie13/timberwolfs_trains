{{ $zoom := parseint .globals.zoom }}


{{$template := concat "template_auto_" .ttd_len -}}{{$template_turn_1 := concat "template_auto_turn_1_" .ttd_len -}}{{$template_turn_2 := concat "template_auto_turn_2_" .ttd_len -}}

{{if eq .globals.bpp "32"}}{{ altsprites .id $template $zoom }}{{else}}{{ altsprites8 .id $template $zoom }}{{end}}
{{if eq .globals.bpp "32"}}{{ altspritesn .id $template_turn_1 $zoom "_turn_1" }}{{else}}{{ altsprites8n .id $template_turn_1 $zoom "_turn_1" }}{{end}}
{{if eq .globals.bpp "32"}}{{ altspritesn .id $template_turn_2 $zoom "_turn_2" }}{{else}}{{ altsprites8n .id $template_turn_2 $zoom "_turn_2" }}{{end}}

{{template "curve_switch" .id }}

// Cargo sprites
{{ $cargo_list := "" -}}{{ $id := .id -}}
{{if eq .cargo_handling "Bulk" -}}
{{ $cargo_list = "bulk" -}}
{{else if eq .cargo_handling "Bolster" -}}
{{ $cargo_list = "bdmt,wood,crate,metal,timber,fmsp_old,fmsp_modern,ensp_old,ensp_modern,tyre" -}}
{{else if eq .cargo_handling "Container" -}}
{{ $cargo_list = "container" -}}
{{end -}}

{{ range $index, $element := slice $cargo_list -}}{{ if $element -}}
// Cargo: {{$element}}
// cargo sprites are always 8 bit
{{$elus := concat "_" $element}}{{ range $idx2, $el2 := slice "_none,_half,_full" }}
{{$cargo := concat $elus $el2  }}
{{$fullid := concat $id $cargo}}{{ altsprites8 $fullid $template $zoom }}
{{ altsprites8n $fullid $template_turn_1 $zoom "_turn_1" }}
{{ altsprites8n $fullid $template_turn_2 $zoom "_turn_2" }}
{{end -}}
{{$cargoid := concat $id $elus }}
spritegroup spritegroup_{{$cargoid}} {
	loading: [spriteset_{{$id}}_{{$element}}_none, spriteset_{{$id}}_{{$element}}_half, spriteset_{{$id}}_{{$element}}_half, spriteset_{{$id}}_{{$element}}_full ];
	loaded: [spriteset_{{$id}}_{{$element}}_none, spriteset_{{$id}}_{{$element}}_half, spriteset_{{$id}}_{{$element}}_half, spriteset_{{$id}}_{{$element}}_full ];
}

spritegroup spritegroup_{{$cargoid}}_turn_1 {
	loading: [spriteset_{{$id}}_{{$element}}_none_turn_1, spriteset_{{$id}}_{{$element}}_half_turn_1, spriteset_{{$id}}_{{$element}}_half_turn_1, spriteset_{{$id}}_{{$element}}_full_turn_1 ];
	loaded: [spriteset_{{$id}}_{{$element}}_none_turn_1, spriteset_{{$id}}_{{$element}}_half_turn_1, spriteset_{{$id}}_{{$element}}_half_turn_1, spriteset_{{$id}}_{{$element}}_full_turn_1 ];
}

spritegroup spritegroup_{{$cargoid}}_turn_2 {
	loading: [spriteset_{{$id}}_{{$element}}_none_turn_2,spriteset_{{$id}}_{{$element}}_half_turn_2, spriteset_{{$id}}_{{$element}}_half_turn_2, spriteset_{{$id}}_{{$element}}_full_turn_2 ];
	loaded: [spriteset_{{$id}}_{{$element}}_none_turn_2,spriteset_{{$id}}_{{$element}}_half_turn_2, spriteset_{{$id}}_{{$element}}_half_turn_2, spriteset_{{$id}}_{{$element}}_full_turn_2 ];
}

{{template "cargo_curve_switch" $cargoid }}
{{end -}}{{ end }}
// End cargo sprites

{{ $has_cargo_switch := "" }}
{{ $bulk_cargos := "aore,bdmt,bean,cass,cblk,cmnt,cere,clay,coal,coke,core,ctcd,fecr,ficr,frut,grai,grvl,iore,lime,kaol,maiz,mno2,nitr,olsd,peat,phos,pota,pore,qlme,rcyc,salt,sand,sash,scmt,sgbt,sgcn,slag,sugr,sulp,toff,uran,whea" }}
{{ $bolster_cargos := "bdmt,wood,batt,beer,boom,bubl,cera,fzdr,java,nuts,papr,powr,toys,veng,vpts,plas,dyes,mnsp,ficr,soap,coat,copr,csti,iron,metl,stal,stcb,stel,stst,zinc,wdpr,fmsp,ensp,tyre" }}

{{ if eq .cargo_handling "Bulk" }}
{{ $has_cargo_switch = "1" }}
{{ range $index, $element := slice $bulk_cargos }}
switch(FEAT_TRAINS, SELF, switch_{{$id}}_cargo_{{$element}}, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | (getbits(extra_callback_info1, 8, 8) == 1 ? recolour_bulk + {{$index}} : PALETTE_USE_DEFAULT), 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: switch_{{$id}}_curve;
    1: switch_{{$id}}_bulk_curve;

    // This should never be executed
    return spriteset_invisible;
}

switch (FEAT_TRAINS, SELF, switch_{{$id}}_graphics_{{$element}}, position_in_articulated_veh % 3) 
{
    1: return switch_{{$id}}_cargo_{{$element}};
    return spriteset_invisible;
}
{{ end }}
{{ else if eq .cargo_handling "Bolster" }}
{{ $has_cargo_switch = "1" }}
{{ range $index, $element := slice $bolster_cargos }}
{{ $palette := "PALETTE_USE_DEFAULT" }}{{ $cargosprite := $element }}

// Check recolour cargo
// Be careful to update numbers when adding/removing cargo types
{{if eq $element "batt" "beer" "boom" "bubl" "cera" "fzdr" "java" "nuts" "papr" "powr" "toys" "veng" "vpts" "plas" "dyes" "ficr" "mnsp" "soap" "coat" }}{{ $palette = printf "recolour_crate + %d - 2" $index }}{{ $cargosprite = "crate"}}{{end}}
{{if eq $element "copr" "csti" "iron" "metl" "stal" "stcb" "stel" "stst" "zinc" }}{{ $palette =  printf "recolour_metal + %d - 21" $index }}{{ $cargosprite = "metal"}}{{end}}
{{if eq $element "wdpr" }}{{ $cargosprite = "timber"}}{{end}}

{{ if eq $element "fmsp" }}
switch(FEAT_TRAINS, SELF, switch_{{$id}}_age_dependent_cargo_{{$element}}, current_year) {
    0..1920: switch_{{$id}}_{{$cargosprite}}_old_curve;
    switch_{{$id}}_{{$cargosprite}}_modern_curve;
}
{{ else if eq $element "ensp" }}
switch(FEAT_TRAINS, SELF, switch_{{$id}}_age_dependent_cargo_{{$element}}, current_year) {
    0..1945: switch_{{$id}}_{{$cargosprite}}_old_curve;
    switch_{{$id}}_{{$cargosprite}}_modern_curve;
}
{{ end}}

switch(FEAT_TRAINS, SELF, switch_{{$id}}_cargo_{{$element}}, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | (getbits(extra_callback_info1, 8, 8) == 1 ? {{$palette}} : PALETTE_USE_DEFAULT), 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: switch_{{$id}}_curve;
    {{ if eq $element "fmsp" "ensp" }}
    1: switch_{{$id}}_age_dependent_cargo_{{$element}};
    {{else}}
    1: switch_{{$id}}_{{$cargosprite}}_curve;
    {{end}}

    // This should never be executed
    return spriteset_invisible;
}

switch (FEAT_TRAINS, SELF, switch_{{$id}}_graphics_{{$element}}, position_in_articulated_veh % 3) 
{
    1: return switch_{{$id}}_cargo_{{$element}};
    return spriteset_invisible;
}
{{ end }}
{{ else if eq .cargo_handling "Container" }}
{{ $has_cargo_switch = "1" }}
switch(FEAT_TRAINS, SELF, switch_{{$id}}_cargo_container, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: switch_{{$id}}_curve;
    1: switch_{{$id}}_container_curve;

    // This should never be executed
    return spriteset_invisible;
}

switch (FEAT_TRAINS, SELF, switch_{{$id}}_graphics_container, position_in_articulated_veh % 3) 
{
    1: return switch_{{$id}}_cargo_container;
    return spriteset_invisible;
}
{{ end }}

switch(FEAT_TRAINS, SELF, switch_{{.id}}_articulation, extra_callback_info1) {
    0 .. 2: return vehicle_{{.id}};
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

switch (FEAT_TRAINS, SELF, switch_{{.id}}_length, position_in_articulated_veh % 3) 
{
    {{range $index, $element := slice .articulated_lengths -}}
    {{$index }}: return {{ $element }};
    {{end}}    
}

{{ if ne .cargo_handling "Container" }}
switch (FEAT_TRAINS, SELF, switch_{{.id}}_graphics, position_in_articulated_veh % 3) 
{
    1: return switch_{{.id}}_curve;
    return spriteset_invisible;
}
{{end}}


item(FEAT_TRAINS, vehicle_{{.id}}) {
    property {
        name:                         {{.name_string}};
        climates_available:           bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
        introduction_date:            date({{.year}}, 1, 1);
        model_life:                   VEHICLE_NEVER_EXPIRES;
        vehicle_life:                 30;

        default_cargo_type:           {{if ne .default_cargo "BRAKE"}}{{.default_cargo}}{{else}}GOOD{{end}};

        {{if eq .cargo_handling "Passengers" }}
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit: [ YETI, YETY ];
        {{else if eq .cargo_handling "Bulk" }}
        refittable_cargo_classes: bitmask(CC_BULK);
        cargo_allow_refit: [FRUT];
        {{else if eq .cargo_handling "Van" }}
        refittable_cargo_classes: bitmask(CC_COVERED, CC_EXPRESS);
        {{else if eq .cargo_handling "Parcel" }}
        refittable_cargo_classes: bitmask(CC_MAIL);        
        {{else if eq .cargo_handling "Siphon" }}
        refittable_cargo_classes: bitmask(CC_MAIL);
        cargo_allow_refit: [MILK];
        {{else if eq .cargo_handling "Steel" }}
        cargo_allow_refit: [STEL, METL, COPR, CSTI, IRON, PIPE, STAL, STCB, STST, ZINC];
         {{else if eq .cargo_handling "Container" }}
        refittable_cargo_classes: bitmask(CC_EXPRESS);     
        {{else if eq .cargo_handling "Bolster" }}
        refittable_cargo_classes: bitmask(CC_PIECE_GOODS);
        cargo_disallow_refit: [LVST];      
        {{else if eq .cargo_handling "Tanker" }}
        refittable_cargo_classes: bitmask(CC_LIQUID);
        {{end}}

        power:                        0 hp;
        {{if .speed}}speed:                        {{.speed}} mph;{{end}}
        reliability_decay:            20;
        {{if .loading_speed}}loading_speed:                {{.loading_speed}};{{end}}
        cost_factor:                  {{.cost}};
        running_cost_factor:          {{.running_cost}};
        sprite_id:                    SPRITE_ID_NEW_TRAIN;
        misc_flags:                   bitmask(TRAIN_FLAG_2CC {{if $has_cargo_switch}}, TRAIN_FLAG_SPRITE_STACK{{end}});
        refit_cost:                   0;
        track_type:                   RAIL;
        running_cost_base:            RUNNING_COST_STEAM;
        cargo_capacity:               {{.capacity}} / 3;
        weight:                       {{.weight}} ton;
        
    }

    graphics {
        {{ if eq .cargo_handling "Container" }}
        cargo_capacity: return {{.capacity}} / 3;
        default:  switch_{{$id}}_graphics_container;
        {{ else if eq .cargo_handling "Van" }}
        cargo_capacity: return {{.capacity}} / 3;
        default:  switch_{{.id}}_graphics;
        {{else}}
        default:  switch_{{.id}}_graphics;
        {{end}}
        {{ if eq .cargo_handling "Bulk" }}
        {{ range $index, $element := slice $bulk_cargos }}
        {{ toupper $element }}: switch_{{$id}}_graphics_{{$element}};{{end}}
        {{ else if eq .cargo_handling "Bolster" }}
        {{ range $index, $element := slice $bolster_cargos }}
        {{ toupper $element }}: switch_{{$id}}_graphics_{{$element}};{{end}}
        // Manual re-used bolster cargo
        BRCK: switch_{{$id}}_graphics_bdmt;
        {{end}}
        additional_text: return {{.additional_text_string}};
        articulated_part: switch_{{.id}}_articulation;
        length: switch_{{.id}}_length;
        purchase: spriteset_{{.id}};
        purchase_cargo_capacity: spriteset_{{.id}};
    }
}
